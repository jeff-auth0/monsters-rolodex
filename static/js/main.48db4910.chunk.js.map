{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCNDI,G,YAAO,SAACC,GAAD,OAClB,sBAAKJ,UAAU,iBAAf,UACE,qBACEK,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAEL,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,aCNTC,EAAW,SAACP,GAAD,OAGtB,aAFA,CAEA,OAAKJ,UAAU,YAAf,SACGI,EAAMQ,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCoCVM,E,kDAvCb,aAAe,IAAD,8BACZ,gBAiBFf,aAAe,SAACgB,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtC,EAAKC,MAAQ,CACXR,SAAU,GACVK,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKT,SAAS,CACZJ,SAAUa,S,oBAQlB,WAAU,IAAD,EAC2BC,KAAKN,MAA/BR,EADD,EACCA,SAAUK,EADX,EACWA,YACZU,EAAmBf,EAASgB,QAAO,SAACrB,GACxC,OAAOA,EAAQE,KAAKoB,cAAcC,SAASb,EAAYY,kBAEzD,OACE,sBAAK7B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACEF,YAAY,kBACZC,aAAc2B,KAAK3B,eAErB,cAAC,EAAD,CAAUa,SAAUe,W,GAlCVI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.48db4910.chunk.js","sourcesContent":["import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className='search'\n    type='search'\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","import React from 'react';\nimport './card.styles.css';\nexport const Card = (props) => (\n  <div className='card-container'>\n    <img\n      alt='monster'\n      src={`https://robohash.org/${props.monster.id}?set=set5&size=180x180`}\n    />\n    <h1>{props.monster.name}</h1>\n    <p>{props.monster.email}</p>\n  </div>\n);\n","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\nexport const CardList = (props) => (\n  // props is object passed\n\n  <div className='card-list'>\n    {props.monsters.map((monster) => (\n      <Card key={monster.id} monster={monster}></Card>\n    ))}\n  </div>\n);\n","import { Component } from 'react';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) =>\n        this.setState({\n          monsters: users,\n        })\n      );\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      <div className='App'>\n        <h1> Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}